[null,{"name":"reactionGet","temp":"msgReaction","event-type":"28","_id":"zimku","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nvar rectarray = globalVars('reactionRoleInf');\nvar usrWhoReacted = reaction.users.last();\nconst _this = this;\nconst fs = require('fs');\nvar messageSent = 'Successfully added the role {roleName} in {server}';\n// The only variables that work rn, {rolename} and {server}\nvar interval;\n\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\nasync function checkRoles() {\n    try {\n        if (usrWhoReacted.id != client.user.id) {\n\n            if (rectarray[msgRct.id] != null) {\n                var newArr = rectarray[msgRct.id];\n                for (io = 0; io < newArr.length; io++) {\n                    if (newArr[io][0] == reaction.emoji.name || newArr[io][0].name == reaction.emoji.name) {\n                        var newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n                        var checkRole = await msgRct.guild.roles.get(newArr[io][1])\n                        if (checkRole != null) {\n                            let newUserArrayIds = [];\n                            let newUserArray = await reaction.users.array();\n\n                            newUserArray.forEach(useritem => {\n                                newUserArrayIds.push(useritem.id)\n                            });\n                            rectarray[msgRct.id][io][3] = newUserArrayIds;\n                            if (newUsr.roles.has(newArr[io][1])) {\n\n                                _this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                    if (err) {\n                                        return console.log(err);\n                                    }\n                                });\n                                break;\n                            } else {\n\n                                newUsr.addRole(checkRole);\n                                if (dmUserAfter) {\n                                    messageSent = messageSent.replace(/{roleName}/g, checkRole.name);\n                                    messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n                                    newUsr.send(messageSent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                    if (err) {\n                                        return console.log(err);\n                                    }\n                                });\n                                break;\n                            }\n                        } else {\n                            delete rectarray[msgRct.id];\n                            _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n\n                            msgRct.edit({\n                                embed: {\n                                    color: 0xff0000,\n                                    title: \"Role Reaction Menu\",\n                                    description: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n                                    timestamp: new Date()\n                                }\n                            });\n                            _this.callNextAction(cache);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"}]},{"name":"reactionRev","temp":"msgReaction","event-type":"29","_id":"ZQmhC","actions":[{"reaction":"1","varName":"msgReaction","info":"0","storage":"1","varName2":"messageRct","name":"Store Reaction Info"},{"behavior":"1","interpretation":"1","code":"const reaction = tempVars('msgReaction');\nconst msgRct = tempVars('messageRct');\nvar rectarray = globalVars('reactionRoleInf');\nlet usrWhoReacted = reaction.users.array();\nconst _this = this;\nconst fs = require('fs');\n\nlet newUserArrayIds = [];\nlet newUserArray = reaction.users.array();\n\nnewUserArray.forEach(useritem => {\n    newUserArrayIds.push(useritem.id)\n});\n\nvar messageSent = 'Successfully removed the role {roleName} in {server}';\n// The only variables that work rn, {rolename} and {server}\nvar actualUser;\n// Setings\n\nconst dmUserAfter = true; // Default, can be changed to false\n\n//\nasync function checkRoles() {\n    try {\n        if (rectarray[msgRct.id] != null) {\n            var newArr = rectarray[msgRct.id];\n            for (io = 0; io < newArr.length; io++) {\n                if (newArr[io][0] == reaction.emoji.name || newArr[io][0].name == reaction.emoji.name) {\n                    if (rectarray[msgRct.id][io][3] != null) {\n                        usrWhoReacted = rectarray[msgRct.id][io][3].filter(val => !newUserArrayIds.includes(val))[0];\n                        if (usrWhoReacted != null) {\n                            var newUsr = await msgRct.guild.fetchMember(usrWhoReacted);\n                            var checkRole = await msgRct.guild.roles.get(newArr[io][1]);\n                            if (checkRole != null) {\n                                if (!newUsr.roles.has(newArr[io][1])) {\n                                    var newUsrIDs = [];\n                                    var arrUsrIds = await reaction.users.array();\n                                    arrUsrIds.forEach(useritem => {\n                                        newUsrIDs.push(useritem.id)\n                                    });\n                                    rectarray[msgRct.id][io][3] = newUsrIDs;\n                                    _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n                                    fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                        if (err) {\n                                            return console.log(err);\n                                        }\n                                    });\n                                    break;\n                                } else {\n                                    var newUsrIDs = [];\n                                    var arrUsrIds = await reaction.users.array();\n                                    arrUsrIds.forEach(useritem => {\n                                        newUsrIDs.push(useritem.id)\n                                    });\n                                    rectarray[msgRct.id][io][3] = newUsrIDs;\n                                    _this.storeValue(rectarray, 3, 'reactionRoleInf', cache)\n                                    newUsr.removeRole(checkRole);\n                                    if (dmUserAfter) {\n                                        messageSent = messageSent.replace(/{roleName}/g, checkRole.name);\n                                        messageSent = messageSent.replace(/{server}/g, msgRct.guild.name);\n                                        newUsr.send(messageSent);\n                                    }\n                                    fs.writeFile(\"./data/reactionRoleData.json\", JSON.stringify(rectarray), function(err) {\n                                        if (err) {\n                                            return console.log(err);\n                                        }\n                                    });\n                                    break;\n                                }\n                            } else {\n                                delete rectarray[msgRct.id];\n                                _this.storeValue(rectarray, 3, 'reactionRoleInf', cache);\n                                msgRct.edit({\n                                    embed: {\n                                        color: 0xff0000,\n                                        title: \"Role Reaction Menu\",\n                                        description: `An error has occured.\\nOne of the roles, role name - ${newArr[io][2]} does not exist anymore.\\nIn turn, this embed has now shutdown.\\nPlease remake the embed.`,\n                                        timestamp: new Date()\n                                    }\n                                });\n                                _this.callNextAction(cache);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.log(error);\n    }\n\n}\n\n\ncheckRoles();","storage":"0","varName":"","name":"Run Script"}]},{"name":"reactionStart","temp":"","event-type":"1","_id":"Lwriz","actions":[{"behavior":"0","interpretation":"1","code":"const _this = this;\nconst fs = require('fs');\nvar someArray = [];\nvar someNum = 0;\nvar globalData;\nvar interval;\n\nfunction fetchMessages() {\n    if (someNum != someArray.length) {\n        var channelToFetch = client.channels.get(someArray[someNum]);\n        if (channelToFetch != null) {\n           channelToFetch.fetchMessages({ limit: 100 });\n           console.log(`Fetched messages in channel id ${someArray[someNum]}`);\n           someNum = someNum + 1;\n        } else {\n           delete globalData[someArray[someNum]];\n           fs.writeFile(\"./resources/serverRoleMenu.json\", JSON.stringify(globalData), function(err) {\n               if(err) {\n                   return console.log(err);\n               }\n           }); \n        }\n    } else {\n       console.log('Finished fetching messages from all logged servers.')\n       clearInterval(interval);\n    }\n   }\n\nif(fs.existsSync('./data/reactionRoleData.json')) {\n    fs.readFile('./data/reactionRoleData.json', function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        data = JSON.parse(data)\n    \n        _this.storeValue(data, 3, 'reactionRoleInf', cache);\n    });\n} else {\n    fs.writeFile(\"./data/reactionRoleData.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n    _this.storeValue({}, 3, 'reactionRoleInf', cache);\n}\n\n\n\nif(fs.existsSync('./resources/serverRoleMenu.json')) {\n    fs.readFile('./resources/serverRoleMenu.json', async function read(err, data) {\n        if (err) {\n            throw err;\n        }\n        var DataToLoop = JSON.parse(data);\n        globalData = DataToLoop;\n        for (var key in DataToLoop) {\n            if (DataToLoop.hasOwnProperty(key)) {\n                await someArray.push(DataToLoop[key]);\n            }\n        }\n        interval = setInterval(fetchMessages, 2000);\n    })\n\n} else {\n    fs.writeFile(\"./resources/serverRoleMenu.json\", \"{}\", function(err) {\n        if(err) {\n            return console.log(err);\n        }\n    });\n}\n\n","storage":"0","varName":"","name":"Run Script"}]}]